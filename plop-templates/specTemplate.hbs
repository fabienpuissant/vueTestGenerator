import { shallowMount } from '@vue/test-utils'
import Component from '@/components/{{path}}{{name}}.vue'
import {dataInfos, propsInfos, functions} from '@/../tests/specHelpers/{{name}}SpecHelper.js'

const formatDataForFactory = (dataInfos, propsInfos) => {
  const data = {}
  dataInfos.forEach(element => {
    data[element.name] = element.value
  })

  const props = {}
  propsInfos.forEach(element => {
    props[element.name] = element.value
  })
  return [data, props]
}

const [data, props] = formatDataForFactory(dataInfos, propsInfos)

const factory = (data, props) => {
  return shallowMount(Component, {
      data(){
        return data
      },
      propsData: props
  });
};

const wrapper = factory(data, props)

const validateData = (data) => {

  let needsValidation = false
  if(typeof data.required === "undefined"){
    needsValidation = true
  } else {
    if(data.required){
      needsValidation = true
    }
  }

  if(needsValidation){
    //Variable defined
    expect(wrapper.vm[data.name]).toBeDefined()

    //Type validation
    if(data.type !== undefined){
      if(data.type === "array"){
        expect(Array.isArray(wrapper.vm[data.name])).toBeTruthy()
      } else {
        expect(typeof wrapper.vm[data.name]).toEqual(data.type)
      }
    }

    //Value validation
    if(typeof data.maxValue !== "undefined"){
      expect(wrapper.vm[data.name]).toBeLessThanOrEqual(data.maxValue)
    }
    if(typeof data.minValue !== "undefined"){
      expect(wrapper.vm[data.name]).toBeGreaterThanOrEqual(data.minValue)
    }

    //Length validation
    if(typeof data.length !== "undefined"){
      expect(wrapper.vm[data.name].length).toEqual(data.maxLength)
    }
    if(typeof data.maxLength !== "undefined"){
      expect(wrapper.vm[data.name].length).toBeLessThanOrEqual(data.maxLength)
    }
    if(typeof data.minLength !== "undefined"){
      expect(wrapper.vm[data.name].length).toBeGreaterThanOrEqual(data.minLength)
    }
  }
      
}


describe("{{name}}" , () => {
  it("Should exists", () => {
      expect(wrapper.exists()).toBeTruthy()
  })

  //Data validation
  dataInfos.forEach(data => {
    it("Should have a valid " + data.name + " data", () => {
      validateData(data)
    })
  })

  //Props validation
  propsInfos.forEach(prop => {
    it("Should have a valid " + prop.name + " prop", () => {
      validateData(prop)
    })
  })

  //Function Validations
  functions.forEach(fonction => {

    let nameFunction
    if(fonction.name === undefined || fonction.functionType === "watcher"){
      if(fonction.possibleValues !== undefined){
        nameFunction = "on value " + fonction.possibleValues[0].name
      }
    } else {
      nameFunction = fonction.name 
    }

    let functionType = ""
    if(fonction.functionType !== undefined){
      functionType = fonction.functionType
    }

    it("Should have a " + functionType + " " + nameFunction + " valid", () => {
      let functionIteration = 0
      if(fonction.returnValues !== undefined){
          functionIteration = fonction.returnValues.length
      }
      else if(fonction.params !== undefined){
        functionIteration = fonction.params.length
      }
      else if(fonction.possibleValues !== undefined){
        if(fonction.possibleValues[0] !== undefined){
          functionIteration = fonction.possibleValues[0].values.length
        }
      }
      else if(fonction.valuesChanged !== undefined){
        if(fonction.valuesChanged[0] !== undefined){
          functionIteration = fonction.valuesChanged[0].values.length
        }
      }
      else if(fonction.emits !== undefined){
        if(fonction.emits[0] !== undefined){
          functionIteration = fonction.emits[0].values.length
        }
      }

      for(let resultIndex = 0; resultIndex < functionIteration; resultIndex++){
          //For each result, we need to change the wrapper according to the parameters and the values given
          let newData = [...dataInfos];
          let newProps = [...propsInfos];
          let [newDataFormatted, newPropsFormatted] = formatDataForFactory(newData, newProps)
          let newWrapper = factory(newDataFormatted, newPropsFormatted);

          //If there is no possibleValue and no params and no returnValue we call the function
          if(fonction.possibleValues === undefined && fonction.params === undefined && fonction.returnValues === undefined){
            newWrapper.vm[fonction.name]()
          }
            //If there is no possibleValue and no params we check the result
          else if(fonction.possibleValues === undefined && fonction.params === undefined && fonction.returnValues !== undefined) {
            let res = newWrapper.vm[fonction.name]()
            expect(res).toEqual(fonction.returnValues[resultIndex])
          }
          else {
            //Changing data corresponding to the possibleValues
            if(fonction.possibleValues !== undefined){
              fonction.possibleValues.forEach(newValue => {
                  [newData, newProps] = replaceDataForFactory(newValue, resultIndex)
              })
            }
            //If no changes in data, formatting the dataInfo and propsInfo
            else {
              [newData, newProps] = formatDataForFactory(newData, newProps)
            }
            newWrapper = factory(newData, newProps);

            //Updating the data in case that data changes in possibleValues
            if(fonction.possibleValues !== undefined){
              fonction.possibleValues.forEach((newValue) => {
                newWrapper.vm[newValue.name] = newValue.values[resultIndex]
              })
            }
            
            if(fonction.name !== undefined || fonction.functionType !== "watcher"){
              //If the function return something
              if(fonction.returnValues !== undefined){
                //Add params to the func
                if(fonction.params !== undefined){
                  let res =  newWrapper.vm[fonction.name](...fonction.params[resultIndex])
                  expect(res).toEqual(fonction.returnValues[resultIndex])
                } 
                else {
                  expect(newWrapper.vm[fonction.name]).toEqual(fonction.returnValues[resultIndex])
                }
              }
              else {
                //Add params to the function
                if(fonction.params !== undefined){
                  newWrapper.vm[fonction.name](...fonction.params[resultIndex])
                } 
                else {
                  newWrapper.vm[fonction.name]()
                }
              }
            } 
            else {
              let watcher = newWrapper.vm.$options.watch[fonction.possibleValues[0].name]
              if(watcher.handler !== undefined){
                watcher.handler.call(newWrapper.vm);
              } else {
                watcher.call(newWrapper.vm)
              }
            }
          }

          //After the function has been called, if there is data changes, whe check them
          if(fonction.valuesChanged !== undefined){
            fonction.valuesChanged.forEach(value => {
              expect(newWrapper.vm[value.name]).toEqual(value.values[resultIndex])
            })
          }

          //Emits validator
          if(fonction.emits !== undefined){
            fonction.emits.forEach(emit => {
              if(emit.values[resultIndex] !== null){
                expect(newWrapper.emitted(emit.tag)).toBeTruthy()
                expect(newWrapper.emitted(emit.tag)[0]).toEqual([emit.values[resultIndex]])
              }
            })
          }
        }
      })
    })
})



const replaceDataForFactory = (newValue, resultIndex) => {
  let newData = [...dataInfos]
  let dataFound = newData.find(el => {return el.name === newValue.name})
  if(typeof dataFound !== "undefined"){
    dataFound.value = newValue.values[resultIndex]
  }

  let newProps = [...propsInfos]
  dataFound = newProps.find(el => {return el.name === newValue.name})
  if(typeof dataFound !== "undefined"){
    dataFound.value = newValue.values[resultIndex]
  }
  
  [newData, newProps] = formatDataForFactory(newData, newProps)
  return [newData, newProps]
}